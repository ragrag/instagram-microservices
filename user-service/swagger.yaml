tags:
- name: Authentication
  description: Authentication
- name: User
  description: User

host: http://localhost:3005
basePath: /api/v1
schemes:
 - https
 - http

paths:
# [POST] /api/v1/signup
  /api/v1/signup:
    post:
      tags:
      - Authentication
      summary: Registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: user email
                username:
                  type: string
                  description: username
                password:
                  type: string
                  description: user password
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/UserWithToken'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        409:
          description: 'Conflict'

  /api/v1/login:
    post:
      tags:
      - Authentication
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
              - type: object
                properties:
                  email:
                    type: string
                    description: user email
                  password:
                    type: string
                    description: user password
              - type: object
                properties:
                  username:
                    type: string
                    description: username
                  password:
                    type: string
                    description: user password
      responses:
        200:
          description: 'Created'
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/UserWithToken'
        400:
          description: 'Bad Request'
        401:
          description: 'Not Found'
        404:
          description: 'Not Found'

  /api/v1/users/password:
    put:
      tags:
      - User
      summary: Update User Password
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: user old password
                newPassword:
                  type: string
                  description: user new password
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        401:
          description: 'Not Found'
        404:
          description: 'Not Found'



  /api/v1/users:
    put:
      tags:
      - User
      summary: Update User 
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: user displayName
                profileBio:
                  type: string
                  description: user description
                photo:
                  type: string
                  format: base64
                  description: user photo
      responses:
        200:
          description: 'Ok'
        400:
          description: 'Bad Request'
        404:
          description: 'Not Found'

securitySchemes:
  bearerAuth:            # arbitrary name for the security scheme
    type: http
    scheme: bearer
    bearerFormat: JWT    # optio

# definitions
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        displayName:
          type: string
        profileBio:
          type: string
        photo:
          type: string
        verified:  
          type: string


    UserWithToken:
      allOf:     
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string


            